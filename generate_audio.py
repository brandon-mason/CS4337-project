import os
from typing import List, Dict
import sf2_loader as sf
from midiutil import MIDIFile

class AudioGenerator:
    """
    Generates midi and audio files from given note data.
    """

    def __init__(self, soundfont: str='soundfonts/Pokemon_Black_and_White.sf2', note_mapping: dict[str, int]=None, note_durations: dict[str, float]=None):
        """
        Initialize the sheet music player.
        
        Args:
            soundfont_path: Path to a SoundFont file (.sf2). If None, will try to use default.
            note_mapping: Dictionary containing note names and their corresponding midi mapping.
            note_durations: Dictionary containing note types and their corresponding duration in seconds.
        """
        self.soundfont_path = soundfont
        self.note_durations = note_durations

        self.loader = sf.sf2_loader(self.soundfont_path)
        sfid = self.loader.get_sfid()
        self.loader < 5

        self.instruments = [{"sfid": sfid, "bank": 0, "preset": 6}]
        
        # MIDI note mapping for treble clef (C4 to C6)
        self.note_mapping = note_mapping

    def create_out_dir(self, out_dir: str="output"):
        """
        Create the output directory if it does not already exist.

        Args:
            out_dir: The output directory
        """
        try:
            if not os.path.isdir(out_dir):
                os.makedirs(out_dir, exist_ok=True)
                print(f"Directory {out_dir} created.")
            os.chdir(out_dir)
        except OSError as e:
            print(f"Error creating directory {out_dir}: {e}")

    def generate_midi(self, notes: List[Dict], tempo: float=120.0, out_dir: str="output"):
        """
        Generate a MIDI file from the note information created using SheetMusicPlayer.

        Args:
            notes: Array of note information generated by SheetMusicPlayer
            tempo: Tempo in beats per minute
        """
        track    = 0
        channel  = 0
        time     = 0    # In beats
        volume   = 100  # 0-127, as per the MIDI standard
        program  = 8

        MyMIDI = MIDIFile(1)  # One track, defaults to format 1 (tempo track is created
                            # automatically)
        MyMIDI.addTempo(track, time, tempo)
        MyMIDI.addProgramChange(track, channel, time, program)

        for i, note in enumerate(notes):
            MyMIDI.addNote(track, channel, note["midi_note"], time + i, self.note_durations[note["duration"]], volume)

        self.create_out_dir(out_dir)
        
        with open("midi.mid", "wb") as output_file:
            MyMIDI.writeFile(output_file)
        os.chdir('..')

    def generate_audio(self, midi_file: str, out_dir: str="output"):
        """
        Generates an audio file from a provided midi file.

        Args:
            image_name: The name of the midi file.
            out_dir: The output directory.
        """
        self.create_out_dir(out_dir)

        self.loader.export_midi_file(f"{midi_file}", name=f"output.wav")
        os.chdir('..')
